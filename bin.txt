/*Varun Sakhare*/

/*s 3-input AND gate*/
module three_input_and(output Y,input A,input B,input C);
wire w1;
and(w1,A,B);
and(Y,w1,C);
endmodule
/*s 3-input OR gate*/
module three_input_or(output Y,input A,input B,input C);
wire w1;
or(w1,A,B);
or(Y,w1,C);
endmodule
/*test bench*/
module testbench;
reg A,B,C;
wire Y_and,Y_or;
three_input_and and_gate(Y_and,A,B,C);
three_input_or or_gate(Y_or,A,B,C);
initial begin
$dumpfile("test.vcd");
$dumpvars(0,testbench);
A=0;B=0;C=0;
#10 A=0;B=0;C=1;
#10 A=0;B=1;C=0;
#10 A=0;B=1;C=1;
#10 A=1;B=0;C=0;
#10 A=1;B=0;C=1;
#10 A=1;B=1;C=0;
#10 A=1;B=1;C=1;
#10 $finish;
end
endmodule

/*s 4-bit magnitude comparator.*/
module four_bit_comparator(A, B, A_greater, A_equal, A_less);
input [3:0] A, B;
output A_greater, A_equal, A_less;

wire [3:0] notA, notB;
wire eq_bit[3:0];

not (notA[3], A[3]);
not (notA[2], A[2]);
not (notA[1], A[1]);
not (notA[0], A[0]);

not (notB[3], B[3]);
not (notB[2], B[2]);
not (notB[1], B[1]);
not (notB[0], B[0]);

wire greater_bit[3:0], less_bit[3:0];

and (greater_bit[3], A[3], notB[3]);
and (less_bit[3], notA[3], B[3]);
xnor (eq_bit[3], A[3], B[3]);

and (greater_bit[2], eq_bit[3], A[2], notB[2]);
and (less_bit[2], eq_bit[3], notA[2], B[2]);
xnor (eq_bit[2], A[2], B[2]);

and (greater_bit[1], eq_bit[2], A[1], notB[1]);
and (less_bit[1], eq_bit[2], notA[1], B[1]);
xnor (eq_bit[1], A[1], B[1]);

and (greater_bit[0], eq_bit[1], A[0], notB[0]);
and (less_bit[0], eq_bit[1], notA[0], B[0]);
xnor (eq_bit[0], A[0], B[0]);

or (A_greater, greater_bit[3], greater_bit[2], greater_bit[1], greater_bit[0]);
or (A_less, less_bit[3], less_bit[2], less_bit[1], less_bit[0]);
assign A_equal = eq_bit[0] && eq_bit[1] && eq_bit[2] && eq_bit[3];

endmodule
/*test bench*/
module four_bit_comparator_tb;
reg [3:0] A, B;
wire A_greater, A_equal, A_less;

four_bit_comparator uut (.A(A), .B(B), .A_greater(A_greater), .A_equal(A_equal), .A_less(A_less));

initial begin
$dumpfile("four_bit_comparator_tb.vcd");
$dumpvars(0, four_bit_comparator_tb);

A = 4'b0000; B = 4'b0000; #10;
A = 4'b0101; B = 4'b0011; #10;
A = 4'b1100; B = 4'b1101; #10;
A = 4'b0111; B = 4'b0111; #10;
A = 4'b1001; B = 4'b0110; #10;
A = 4'b0010; B = 4'b1010; #10;

$finish;
end
endmodule
/*s half adder*/
module half_adder(a,b,sum,carry);
input a,b;
output sum,carry;
xor(sum,a,b);
and(carry,a,b);
endmodule
/*test bench*/
module tb_half_adder;
reg a,b;
wire s,c;
half_adder uut(.a(a),.b(b),.sum(s),.carry(c));
initial begin
$dumpfile("tb_half_adder.vcd");
$dumpvars(0,tb_half_adder);
$monitor("a=%b,b=%b|sum=%b,carry=%b",a,b,s,c);
a=0;b=0;#10;
a=0;b=1;#10;
a=1;b=0;#10;
a=1;b=1;#10;
$finish;
end
endmodule

/*s half subtractor*/
module half_subtractor(a,b,difference,borrow);
input a,b;
output difference,borrow;
xor(difference,a,b);
and(borrow,~a,b);
endmodule
/*test bench*/
module tb_half_subtractor;
reg a,b;
wire difference,borrow;
half_subtractor uut(.a(a),.b(b),.difference(difference),.borrow(borrow));
initial begin
$dumpfile("tb_half_subtractor.vcd");
$dumpvars(0,tb_half_subtractor);
$monitor("a=%b,b=%b|difference=%b,borrow=%b",a,b,difference,borrow);
a=0;b=0;#10;
a=0;b=1;#10;
a=1;b=0;#10;
a=1;b=1;#10;
$finish;
end
endmodule
/*s full adder*/
module full_adder(a,b,cin,sum,cout);
input a,b,cin;
output sum,cout;
wire sum1,carry1,carry2;
xor(sum1,a,b);
and(carry1,a,b);
xor(sum,sum1,cin);
and(carry2,sum1,cin);
or(cout,carry1,carry2);
endmodule
/*test bench*/
module tb_full_adder;
reg a,b,cin;
wire sum,cout;
full_adder uut(.a(a),.b(b),.cin(cin),.sum(sum),.cout(cout));
initial begin
$dumpfile("tb_full_adder.vcd");
$dumpvars(0,tb_full_adder);
$monitor("a=%b,b=%b,cin=%b|sum=%b,cout=%b",a,b,cin,sum,cout);
a=0;b=0;cin=0;#10;
a=0;b=0;cin=1;#10;
a=0;b=1;cin=0;#10;
a=0;b=1;cin=1;#10;
a=1;b=0;cin=0;#10;
a=1;b=0;cin=1;#10;
a=1;b=1;cin=0;#10;
a=1;b=1;cin=1;#10;
$finish;
end
endmodule
/*s full subtractor*/
module full_subtractor(a,b,bin,difference,bout);
input a,b,bin;
output difference,bout;
wire diff1,borrow1,borrow2;
xor(diff1,a,b);
and(borrow1,~a,b);
xor(difference,diff1,bin);
and(borrow2,~diff1,bin);
or(bout,borrow1,borrow2);
endmodule
/*test bench*/
module tb_full_subtractor;
reg a,b,bin;
wire difference,bout;
full_subtractor uut(.a(a),.b(b),.bin(bin),.difference(difference),.bout(bout));
initial begin
$dumpfile("tb_full_subtractor.vcd");
$dumpvars(0,tb_full_subtractor);
$monitor("a=%b,b=%b,bin=%b|difference=%b,bout=%b",a,b,bin,difference,bout);
a=0;b=0;bin=0;#10;
a=0;b=0;bin=1;#10;
a=0;b=1;bin=0;#10;
a=0;b=1;bin=1;#10;
a=1;b=0;bin=0;#10;
a=1;b=0;bin=1;#10;
a=1;b=1;bin=0;#10;
a=1;b=1;bin=1;#10;
$finish;
end
endmodule
/*s full adder and subtractor*/
module full_adder_subtractor(a,b,cin,mode,result,cout);
input a,b,cin,mode;
output result,cout;
wire bin_b;
xor(bin_b,b,mode);
wire sum1,carry1,carry2;
xor(sum1,a,bin_b);
xor(result,sum1,cin);
and(carry1,a,bin_b);
and(carry2,sum1,cin);
or(cout,carry1,carry2);
endmodule
/*test bench*/
module tb_full_adder_subtractor;
reg a,b,cin,mode;
wire result,cout;
full_adder_subtractor uut(.a(a),.b(b),.cin(cin),.mode(mode),.result(result),.cout(cout));
initial begin
$dumpfile("tb_full_adder_subtractor.vcd");
$dumpvars(0,tb_full_adder_subtractor);
$monitor("a=%b,b=%b,cin=%b,mode=%b|result=%b,cout=%b",a,b,cin,mode,result,cout);
mode=0;a=0;b=0;cin=0;#10;
mode=0;a=0;b=0;cin=1;#10;
mode=0;a=0;b=1;cin=0;#10;
mode=0;a=0;b=1;cin=1;#10;
mode=0;a=1;b=0;cin=0;#10;
mode=0;a=1;b=0;cin=1;#10;
mode=0;a=1;b=1;cin=0;#10;
mode=0;a=1;b=1;cin=1;#10;
mode=1;a=0;b=0;cin=0;#10;
mode=1;a=0;b=0;cin=1;#10;
mode=1;a=0;b=1;cin=0;#10;
mode=1;a=0;b=1;cin=1;#10;
mode=1;a=1;b=0;cin=0;#10;
mode=1;a=1;b=0;cin=1;#10;
mode=1;a=1;b=1;cin=0;#10;
mode=1;a=1;b=1;cin=1;#10;
$finish;
end
endmodule
/*s mux4-1*/
module mux_4_to_1(I0,I1,I2,I3,S0,S1,Y);
input I0,I1,I2,I3,S0,S1;
output Y;
wire notS0,notS1,and0,and1,and2,and3;
not(notS0,S0);
not(notS1,S1);
and(and0,I0,notS1,notS0);
and(and1,I1,notS1,S0);
and(and2,I2,S1,notS0);
and(and3,I3,S1,S0);
or(Y,and0,and1,and2,and3);
endmodule
/*test bench*/
module tb_mux_4_to_1;
reg I0,I1,I2,I3,S0,S1;
wire Y;
mux_4_to_1 uut(.I0(I0),.I1(I1),.I2(I2),.I3(I3),.S0(S0),.S1(S1),.Y(Y));
initial begin
$monitor("I0=%b,I1=%b,I2=%b,I3=%b,S0=%b,S1=%b|Y=%b",I0,I1,I2,I3,S0,S1,Y);
I0=0;I1=0;I2=0;I3=0;S0=0;S1=0;#10;
I0=0;I1=0;I2=0;I3=1;S0=0;S1=0;#10;
I0=0;I1=1;I2=0;I3=0;S0=0;S1=0;#10;
I0=1;I1=0;I2=0;I3=0;S0=0;S1=0;#10;
I0=0;I1=0;I2=0;I3=0;S0=0;S1=1;#10;
I0=0;I1=0;I2=0;I3=1;S0=0;S1=1;#10;
I0=0;I1=1;I2=0;I3=0;S0=0;S1=1;#10;
I0=1;I1=0;I2=0;I3=0;S0=0;S1=1;#10;
I0=0;I1=0;I2=0;I3=0;S0=1;S1=0;#10;
I0=0;I1=0;I2=1;I3=0;S0=1;S1=0;#10;
I0=0;I1=1;I2=0;I3=0;S0=1;S1=0;#10;
I0=1;I1=0;I2=0;I3=0;S0=1;S1=0;#10;
I0=0;I1=0;I2=0;I3=0;S0=1;S1=1;#10;
I0=0;I1=0;I2=1;I3=0;S0=1;S1=1;#10;
I0=0;I1=1;I2=0;I3=0;S0=1;S1=1;#10;
I0=1;I1=0;I2=0;I3=0;S0=1;S1=1;#10;
$finish;
end
initial begin
$dumpfile("mux_4_to_1.vcd");
$dumpvars(0,tb_mux_4_to_1);
end
endmodule
/*s decoder 3 - 8*/
module decoder_3_to_8(A,B,C,D0,D1,D2,D3,D4,D5,D6,D7);
input A,B,C;
output D0,D1,D2,D3,D4,D5,D6,D7;
wire notA,notB,notC;
not(notA,A);
not(notB,B);
not(notC,C);
and(D0,notA,notB,notC);
and(D1,notA,notB,C);
and(D2,notA,B,notC);
and(D3,notA,B,C);
and(D4,A,notB,notC);
and(D5,A,notB,C);
and(D6,A,B,notC);
and(D7,A,B,C);
endmodule
/*test bench*/
module tb_decoder_3_to_8;
reg A,B,C;
wire D0,D1,D2,D3,D4,D5,D6,D7;
decoder_3_to_8 uut(.A(A),.B(B),.C(C),.D0(D0),.D1(D1),.D2(D2),.D3(D3),.D4(D4),.D5(D5),.D6(D6),.D7(D7));
initial begin
$monitor("A=%b,B=%b,C=%b|D0=%b,D1=%b,D2=%b,D3=%b,D4=%b,D5=%b,D6=%b,D7=%b",A,B,C,D0,D1,D2,D3,D4,D5,D6,D7);
A=0;B=0;C=0;#10;
A=0;B=0;C=1;#10;
A=0;B=1;C=0;#10;
A=0;B=1;C=1;#10;
A=1;B=0;C=0;#10;
A=1;B=0;C=1;#10;
A=1;B=1;C=0;#10;
A=1;B=1;C=1;#10;
$finish;
end
initial begin
$dumpfile("decoder_3_to_8.vcd");
$dumpvars(0,tb_decoder_3_to_8);
end
endmodule
/*s barrel shifter 4 bit*/
module barrel_shifter_4bit(A,S0,S1,Y);
input[3:0]A;
input S0,S1;
output[3:0]Y;
wire[3:0]shift1,shift2;
assign shift1[0]=(S1)?A[1]:A[0];
assign shift1[1]=(S1)?A[2]:A[1];
assign shift1[2]=(S1)?A[3]:A[2];
assign shift1[3]=(S1)?1'b0:A[3];
assign shift2[0]=(S1)?1'b0:A[0];
assign shift2[1]=(S1)?A[0]:A[1];
assign shift2[2]=(S1)?A[1]:A[2];
assign shift2[3]=(S1)?A[2]:A[3];
assign Y[0]=(S0)?shift2[0]:shift1[0];
assign Y[1]=(S0)?shift2[1]:shift1[1];
assign Y[2]=(S0)?shift2[2]:shift1[2];
assign Y[3]=(S0)?shift2[3]:shift1[3];
endmodule
/*test bench*/
module tb_barrel_shifter_4bit;
reg[3:0]A;
reg S0,S1;
wire[3:0]Y;
barrel_shifter_4bit uut(.A(A),.S0(S0),.S1(S1),.Y(Y));
initial begin
$monitor("A=%b,S0=%b,S1=%b|Y=%b",A,S0,S1,Y);
A=4'b0000;S0=0;S1=0;#10;
A=4'b0001;S0=0;S1=0;#10;
A=4'b0010;S0=0;S1=0;#10;
A=4'b0011;S0=0;S1=0;#10;
A=4'b0100;S0=0;S1=0;#10;
A=4'b0001;S0=0;S1=1;#10;
A=4'b0010;S0=0;S1=1;#10;
A=4'b0011;S0=0;S1=1;#10;
A=4'b0100;S0=0;S1=1;#10;
A=4'b0101;S0=0;S1=1;#10;
A=4'b0001;S0=1;S1=0;#10;
A=4'b0010;S0=1;S1=0;#10;
A=4'b0011;S0=1;S1=0;#10;
A=4'b0100;S0=1;S1=0;#10;
A=4'b0101;S0=1;S1=0;#10;
A=4'b0001;S0=1;S1=1;#10;
A=4'b0010;S0=1;S1=1;#10;
A=4'b0011;S0=1;S1=1;#10;
A=4'b0100;S0=1;S1=1;#10;
A=4'b0101;S0=1;S1=1;#10;
$finish;
end
initial begin
$dumpfile("barrel_shifter_4bit.vcd");
$dumpvars(0,tb_barrel_shifter_4bit);
end
endmodule
/* encoder 4-2*/
module encoder4to2(I0,I1,I2,I3,out);
input I0,I1,I2,I3;
output reg[1:0]out;
always@(I0 or I1 or I2 or I3) begin
if(I3) out=2'b11;
else if(I2) out=2'b10;
else if(I1) out=2'b01;
else if(I0) out=2'b00;
else out=2'bxx;
end
endmodule
/*test bench*/
module tb_encoder4to2;
reg I0,I1,I2,I3;
wire[1:0]out;
encoder4to2 uut(.I0(I0),.I1(I1),.I2(I2),.I3(I3),.out(out));
initial begin
$monitor("I0=%b,I1=%b,I2=%b,I3=%b|out=%b",I0,I1,I2,I3,out);
I0=0;I1=0;I2=0;I3=0;#10;
I0=0;I1=0;I2=0;I3=1;#10;
I0=0;I1=0;I2=1;I3=0;#10;
I0=0;I1=1;I2=0;I3=0;#10;
I0=1;I1=0;I2=0;I3=0;#10;
$finish;
end
initial begin
$dumpfile("encoder4to2.vcd");
$dumpvars(0,tb_encoder4to2);
end
endmodule
/*s simmple bit alu*/
module simple_bit_ALU(A,B,ALU_S,Result,Carry);
input A,B;
input[1:0]ALU_S;
output reg Result;
output reg Carry;
always@(*) begin
case(ALU_S)
2'b00:begin
Result=A&B;
Carry=0;
end
2'b01:begin
Result=A|B;
Carry=0;
end
2'b10:begin
Result=A^B;
Carry=0;
end
2'b11:begin
Result=A+B;
Carry=(A&B);
end
default:begin
Result=0;
Carry=0;
end
endcase
end
endmodule
/*test bench*/
module tb_simple_bit_ALU;
reg A,B;
reg[1:0]ALU_S;
wire Result;
wire Carry;
simple_bit_ALU uut(.A(A),.B(B),.ALU_S(ALU_S),.Result(Result),.Carry(Carry));
initial begin
$monitor("A=%b,B=%b,ALU_S=%b|Result=%b,Carry=%b",A,B,ALU_S,Result,Carry);
A=0;B=0;ALU_S=2'b00;#10;
A=0;B=1;ALU_S=2'b00;#10;
A=1;B=0;ALU_S=2'b00;#10;
A=1;B=1;ALU_S=2'b00;#10;
A=0;B=0;ALU_S=2'b01;#10;
A=0;B=1;ALU_S=2'b01;#10;
A=1;B=0;ALU_S=2'b01;#10;
A=1;B=1;ALU_S=2'b01;#10;
A=0;B=0;ALU_S=2'b10;#10;
A=0;B=1;ALU_S=2'b10;#10;
A=1;B=0;ALU_S=2'b10;#10;
A=1;B=1;ALU_S=2'b10;#10;
A=0;B=0;ALU_S=2'b11;#10;
A=0;B=1;ALU_S=2'b11;#10;
A=1;B=0;ALU_S=2'b11;#10;
A=1;B=1;ALU_S=2'b11;#10;
$finish;
end
initial begin
$dumpfile("simple_bit_ALU.vcd");
$dumpvars(0,tb_simple_bit_ALU);
end
endmodule

/*b a 4-bit input by 2*/
module multiply_by_2(input [3:0] A, output [4:0] Result);
assign Result = A << 1;
endmodule
/*test bench*/
module tb_multiply_by_2;
reg [3:0] A;
wire [4:0] Result;
multiply_by_2 uut(.A(A), .Result(Result));
initial begin
$monitor("A=%b|Result=%b", A, Result);
A = 4'b0000; #10;
A = 4'b0001; #10;
A = 4'b0010; #10;
A = 4'b0011; #10;
A = 4'b0100; #10;
A = 4'b0101; #10;
A = 4'b0110; #10;
A = 4'b0111; #10;
A = 4'b1000; #10;
A = 4'b1001; #10;
A = 4'b1010; #10;
A = 4'b1011; #10;
A = 4'b1100; #10;
A = 4'b1101; #10;
A = 4'b1110; #10;
A = 4'b1111; #10;
$finish;
end
initial begin
$dumpfile("multiply_by_2.vcd");
$dumpvars(0, tb_multiply_by_2);
end
endmodule
/*encoder 4to2*/
module encoder4to2(input [3:0] in, output reg [1:0] out);
always @(*) begin
out = 2'bxx; // Default value
if (in[3]) out = 2'b11;
else if (in[2]) out = 2'b10;
else if (in[1]) out = 2'b01;
else if (in[0]) out = 2'b00;
end
endmodule
/*decoder 2to 4*/
module decoder2to4(input [1:0] in, output reg [3:0] out);
always @(*) begin
out = 4'b0000; // Default value
case (in)
2'b00: out = 4'b0001;
2'b01: out = 4'b0010;
2'b10: out = 4'b0100;
2'b11: out = 4'b1000;
endcase
end
endmodule
/*test bench*/
module tb_encoder_decoder_4to2; // Renamed the test bench
reg [3:0] a;
wire [1:0] b;
reg [1:0] c;
wire [3:0] d;

encoder4to2 enc(.in(a), .out(b));
decoder2to4 dec(.in(c), .out(d));

initial begin
$monitor("Encoder Input: %b, Output: %b", a, b);
a = 4'b0001; #10;
a = 4'b0010; #10;
a = 4'b0100; #10;
a = 4'b1000; #10;
a = 4'b0000; #10;

c = 2'b00; #10;
$display("Decoder Input: %b, Output: %b", c, d);
c = 2'b01; #10;
$display("Decoder Input: %b, Output: %b", c, d);
c = 2'b10; #10;
$display("Decoder Input: %b, Output: %b", c, d);
c = 2'b11; #10;
$display("Decoder Input: %b, Output: %b", c, d);

$finish;
end
initial begin
$dumpfile("encoder_decoder.vcd");
$dumpvars(0, tb_encoder_decoder_4to2);
end
endmodule
/*mux 8 to 1*/
module mux8to1(input [7:0] in, input [2:0] sel, output reg out);
always @(*) begin
case(sel)
3'b000: out = in[0];
3'b001: out = in[1];
3'b010: out = in[2];
3'b011: out = in[3];
3'b100: out = in[4];
3'b101: out = in[5];
3'b110: out = in[6];
3'b111: out = in[7];
default: out = 1'b0;
endcase
end
endmodule
/*test bench*/
module tb_mux8to1;
reg [7:0] in;
reg [2:0] sel;
wire out;

mux8to1 mux(.in(in), .sel(sel), .out(out));

initial begin
in = 8'b10101010; 
sel = 3'b000; #10;
$display("Select: %b, Output: %b", sel, out);
sel = 3'b001; #10;
$display("Select: %b, Output: %b", sel, out);
sel = 3'b010; #10;
$display("Select: %b, Output: %b", sel, out);
sel = 3'b011; #10;
$display("Select: %b, Output: %b", sel, out);
sel = 3'b100; #10;
$display("Select: %b, Output: %b", sel, out);
sel = 3'b101; #10;
$display("Select: %b, Output: %b", sel, out);
sel = 3'b110; #10;
$display("Select: %b, Output: %b", sel, out);
sel = 3'b111; #10;
$display("Select: %b, Output: %b", sel, out);

$finish;
end
initial begin
$dumpfile("mux8to1.vcd");
$dumpvars(0, tb_mux8to1);
end
endmodule
/*encoder 8 to 3*/
module encoder8to3(input [7:0] in, output reg [2:0] out, output reg valid);
always @(*) begin
valid = 1'b0; 
out = 3'b000; 

if(in[7]) begin
    out = 3'b111;
    valid = 1'b1;
end else if(in[6]) begin
    out = 3'b110;
    valid = 1'b1;
end else if(in[5]) begin
    out = 3'b101;
    valid = 1'b1;
end else if(in[4]) begin
    out = 3'b100;
    valid = 1'b1;
end else if(in[3]) begin
    out = 3'b011;
    valid = 1'b1;
end else if(in[2]) begin
    out = 3'b010;
    valid = 1'b1;
end else if(in[1]) begin
    out = 3'b001;
    valid = 1'b1;
end else if(in[0]) begin
    out = 3'b000;
    valid = 1'b1;
end else begin
    valid = 1'b0; // Reset valid
end
end
endmodule
/*decoder 8to 3*/
module decoder3to8(input [2:0] in, output reg [7:0] out);
always @(*) begin
out = 8'b00000000;
case(in)
3'b000: out[0] = 1'b1;
3'b001: out[1] = 1'b1;
3'b010: out[2] = 1'b1;
3'b011: out[3] = 1'b1;
3'b100: out[4] = 1'b1;
3'b101: out[5] = 1'b1;
3'b110: out[6] = 1'b1;
3'b111: out[7] = 1'b1;
endcase
end
endmodule
/*test bench*/
module tb_encoder_decoder_8to3; // Renamed the test bench
reg [7:0] a;
wire [2:0] b;
wire valid;
reg [2:0] c;
wire [7:0] d;

encoder8to3 enc(.in(a), .out(b), .valid(valid));
decoder3to8 dec(.in(c), .out(d));

initial begin
$monitor("Encoder Input: %b, Output: %b, Valid: %b", a, b, valid);
a = 8'b00000001; #10;
a = 8'b00000010; #10;
a = 8'b00000100; #10;
a = 8'b00001000; #10;
a = 8'b00010000; #10;
a = 8'b00100000; #10;
a = 8'b01000000; #10;
a = 8'b10000000; #10;
a = 8'b00000000; #10;

c = 3'b000; #10;
$display("Decoder Input: %b, Output: %b", c, d);
c = 3'b001; #10;
$display("Decoder Input: %b, Output: %b", c, d);
c = 3'b010; #10;
$display("Decoder Input: %b, Output: %b", c, d);
c = 3'b011; #10;
$display("Decoder Input: %b, Output: %b", c, d);
c = 3'b100; #10;
$display("Decoder Input: %b, Output: %b", c, d);
c = 3'b101; #10;
$display("Decoder Input: %b, Output: %b", c, d);
c = 3'b110; #10;
$display("Decoder Input: %b, Output: %b", c, d);
c = 3'b111; #10;
$display("Decoder Input: %b, Output: %b", c, d);

$finish;
end
initial begin
$dumpfile("encoder_decoder_8to3.vcd");
$dumpvars(0, tb_encoder_decoder_8to3);
end
endmodule
/*carry lookahead adder*/
module carry_lookahead_adder(input [3:0] A, input [3:0] B, input Cin, output [3:0] Sum, output Cout);
wire [3:0] P, G, C;

assign P = A ^ B;
assign G = A & B;

assign C[0] = Cin;
assign C[1] = G[0] | (P[0] & C[0]);
assign C[2] = G[1] | (P[1] & C[1]);
assign C[3] = G[2] | (P[2] & C[2]);
assign Cout = G[3] | (P[3] & C[3]);

assign Sum = P ^ {C[2:0], C[0]};
endmodule
/*test bench*/
module tb_carry_lookahead_adder;
reg [3:0] A;
reg [3:0] B;
reg Cin;
wire [3:0] Sum;
wire Cout;

carry_lookahead_adder cla(.A(A), .B(B), .Cin(Cin), .Sum(Sum), .Cout(Cout));

initial begin
A = 4'b0000; B = 4'b0000; Cin = 1'b0; #10;
$display("A: %b, B: %b, Cin: %b, Sum: %b, Cout: %b", A, B, Cin, Sum, Cout);
A = 4'b0101; B = 4'b0011; Cin = 1'b0; #10;
$display("A: %b, B: %b, Cin: %b, Sum: %b, Cout: %b", A, B, Cin, Sum, Cout);
A = 4'b1111; B = 4'b0001; Cin = 1'b0; #10;
$display("A: %b, B: %b, Cin: %b, Sum: %b, Cout: %b", A, B, Cin, Sum, Cout);
A = 4'b1010; B = 4'b0101; Cin = 1'b1; #10;
$display("A: %b, B: %b, Cin: %b, Sum: %b, Cout: %b", A, B, Cin, Sum, Cout);
A = 4'b1100; B = 4'b1010; Cin = 1'b0; #10;
$display("A: %b, B: %b, Cin: %b, Sum: %b, Cout: %b", A, B, Cin, Sum, Cout);
A = 4'b1111; B = 4'b1111; Cin = 1'b1; #10;
$display("A: %b, B: %b, Cin: %b, Sum: %b, Cout: %b", A, B, Cin, Sum, Cout);
$finish;
end

initial begin
$dumpfile("carry_lookahead_adder.vcd");
$dumpvars(0,tb_carry_lookahead_adder);
end
endmodule
/*wallace tree */
module wallace_tree_multiplier(input [3:0] A, input [3:0] B, output reg [7:0] Product);
wire [3:0] P[3:0];

assign P[0] = A & {4{B[0]}};
assign P[1] = A & {4{B[1]}};
assign P[2] = A & {4{B[2]}};
assign P[3] = A & {4{B[3]}};

wire [5:0] S1, C1;
wire [4:0] S2, C2;
wire [3:0] S3, C3;

assign S1 = P[0] ^ P[1];
assign C1 = P[0] & P[1];

assign S2[0] = S1[0] ^ P[2][0];
assign C2[0] = S1[0] & P[2][0];

assign S2[1] = S1[1] ^ P[2][1];
assign C2[1] = S1[1] & P[2][1];

assign S2[2] = S1[2] ^ P[2][2];
assign C2[2] = S1[2] & P[2][2];

assign S2[3] = S1[3] ^ P[2][3];
assign C2[3] = S1[3] & P[2][3];

assign S2[4] = C1[0] ^ C2[0];
assign C2[4] = C1[0] & C2[0];

assign S3[0] = S2[0] ^ C2[1];
assign C3[0] = S2[0] & C2[1];

assign S3[1] = S2[1] ^ C2[2];
assign C3[1] = S2[1] & C2[2];

assign S3[2] = S2[2] ^ C2[3];
assign C3[2] = S2[2] & C2[3];

assign S3[3] = C2[4];

assign Product = {C3[3], S3[3], S3[2], S3[1], S3[0], C3[0]};
endmodule
/*test bench*/
module tb_wallace_tree_multiplier;
reg [3:0] A;
reg [3:0] B;
wire [7:0] Product;

wallace_tree_multiplier multiplier(.A(A), .B(B), .Product(Product));

initial begin
A = 4'b0000; B = 4'b0000; #10;
$display("A: %b, B: %b, Product: %b", A, B, Product);
A = 4'b0011; B = 4'b0001; #10;
$display("A: %b, B: %b, Product: %b", A, B, Product);
A = 4'b0101; B = 4'b0010; #10;
$display("A: %b, B: %b, Product: %b", A, B, Product);
A = 4'b1100; B = 4'b0101; #10;
$display("A: %b, B: %b, Product: %b", A, B, Product);
A = 4'b1111; B = 4'b1111; #10;
$display("A: %b, B: %b, Product: %b", A, B, Product);
A = 4'b1010; B = 4'b1100; #10;
$display("A: %b, B: %b, Product: %b", A, B, Product);
A = 4'b0111; B = 4'b1010; #10;
$display("A: %b, B: %b, Product: %b", A, B, Product);
A = 4'b0001; B = 4'b1111; #10;
$display("A: %b, B: %b, Product: %b", A, B, Product);
$finish;
end

initial begin
$dumpfile("wallace_tree_multiplier.vcd");
$dumpvars(0,tb_wallace_tree_multiplier);
end
endmodule

/*SR latch with asynchronous
enable and reset*/
module sr_latch(input s,input r,input en,input rst,output q,output qbar);
reg q_int;
assign q=q_int;
assign qbar=~q_int;
always@(posedge en or posedge rst)begin
if(rst)q_int<=1'b0;
else if(en)begin
if(s==1'b1&&r==1'b0)q_int<=1'b1;
else if(s==1'b0&&r==1'b1)q_int<=1'b0;
end
end
endmodule
/*test bench*/
module tb_sr_latch;
reg s,r,en,rst;
wire q,qbar;
sr_latch uut(s,r,en,rst,q,qbar);
initial begin
$dumpfile("sr_latch.vcd");
$dumpvars(0,tb_sr_latch);
s=0;r=0;en=0;rst=1;#10;
rst=0;en=1;s=1;r=0;#10;
s=0;r=1;#10;
s=1;r=1;#10;
s=0;r=0;#10;
en=0;#10;
rst=1;#10;
$finish;
end
endmodule

/*D Latch with Delay*/
module d_latch(input D, Clk, output Q);
    reg Q;
    always @ (posedge Clk) begin
        Q <= #1 D;  // Delay of 1 ns
    end
endmodule
/*test bench*/
module tb_d_latch;
    reg D, Clk;
    wire Q;
    d_latch uut(D, Clk, Q);
    initial begin
        $dumpfile("d_latch.vcd");
        $dumpvars(0, tb_d_latch);
        
        D = 0; Clk = 0; #5;
        D = 1; #5;
        Clk = 1; #5;
        Clk = 0; #5;

        $finish;
    end
endmodule

/*Counter from 7 to 0*/
module counter_7_to_0(input clk, rst, output reg [2:0] count);
    always @(posedge clk or posedge rst) begin
        if (rst)
            count <= 3'b111;  // Start from 7
        else
            count <= (count == 3'b000) ? 3'b111 : count - 1;
    end
endmodule
/*test bench*/
module tb_counter_7_to_0;
    reg clk, rst;
    wire [2:0] count;
    
    counter_7_to_0 uut(clk, rst, count);
    
    initial begin
        $dumpfile("counter_7_to_0.vcd");
        $dumpvars(0, tb_counter_7_to_0);
        
        clk = 0; rst = 1; #10;
        rst = 0; #100;
        
        $finish;
    end
    
    always #5 clk = ~clk;
endmodule

/*UP/DOWN Modulo 8 Gray Code Counter*/
module gray_code_counter(input clk, rst, up, output reg [2:0] gray);
    reg [2:0] count;
    
    always @(posedge clk or posedge rst) begin
        if (rst)
            count <= 3'b000;
        else if (up)
            count <= count + 1;
        else
            count <= count - 1;
    end
    
    always @(*) begin
        gray = (count >> 1) ^ count;  // Gray code conversion
    end
endmodule
/*test n=bench*/
module tb_gray_code_counter;
    reg clk, rst, up;
    wire [2:0] gray;
    
    gray_code_counter uut(clk, rst, up, gray);
    
    initial begin
        $dumpfile("gray_code_counter.vcd");
        $dumpvars(0, tb_gray_code_counter);
        
        clk = 0; rst = 1; up = 1; #10;
        rst = 0; #100;
        
        up = 0; #100;
        
        $finish;
    end
    
    always #5 clk = ~clk;
endmodule

/*N-bit Bidirectional Shift Register using D Flip-Flop*/
module shift_register #(parameter N = 8) 
    (input clk, rst, dir, input [N-1:0] d_in, output reg [N-1:0] q_out);
    
    always @(posedge clk or posedge rst) begin
        if (rst)
            q_out <= 0;
        else if (dir)
            q_out <= {q_out[N-2:0], d_in[N-1]};  // Shift right
        else
            q_out <= {d_in[0], q_out[N-1:1]};    // Shift left
    end
endmodule
/*test bench*/
module tb_shift_register;
    reg clk, rst, dir;
    reg [7:0] d_in;
    wire [7:0] q_out;
    
    shift_register #(8) uut(clk, rst, dir, d_in, q_out);
    
    initial begin
        $dumpfile("shift_register.vcd");
        $dumpvars(0, tb_shift_register);
        
        clk = 0; rst = 1; dir = 1; d_in = 8'b10101010; #10;
        rst = 0; #100;
        
        dir = 0; #100;
        
        $finish;
    end
    
    always #5 clk = ~clk;
endmodule

/*Single-Port Memory of 128 Address Space and 16-bit Addressability*/
module memory(input clk, we, input [6:0] addr_wr, addr_rd, input [15:0] data_in, output reg [15:0] data_out);
    reg [15:0] mem [127:0];  // Memory with 128 locations, each 16-bit wide
    
    always @(posedge clk) begin
        if (we)
            mem[addr_wr] <= data_in;  // Write operation
        data_out <= mem[addr_rd];      // Read operation
    end
endmodule
/*test bench*/
module tb_memory;
    reg clk, we;
    reg [6:0] addr_wr, addr_rd;
    reg [15:0] data_in;
    wire [15:0] data_out;
    
    memory uut(clk, we, addr_wr, addr_rd, data_in, data_out);
    
    initial begin
        $dumpfile("memory.vcd");
        $dumpvars(0, tb_memory);
        
        clk = 0; we = 1; addr_wr = 7'b0000001; data_in = 16'hA5A5; #10;
        addr_rd = 7'b0000001; we = 0; #10;

        $finish;
    end
    
    always #5 clk = ~clk;
endmodule

/*Moore Machine*/
module moore_machine(input clk, rst, input x, output reg z);
    reg [1:0] state, next_state;

    parameter S0 = 2'b00, S1 = 2'b01, S2 = 2'b10, S3 = 2'b11;

    always @(posedge clk or posedge rst) begin
        if (rst)
            state <= S0;
        else
            state <= next_state;
    end

    always @(state or x) begin
        case(state)
            S0: next_state = x ? S1 : S0;
            S1: next_state = x ? S2 : S0;
            S2: next_state = x ? S3 : S0;
            S3: next_state = x ? S1 : S0;
            default: next_state = S0;
        endcase
    end

    always @(state) begin
        z = (state == S3);
    end
endmodule
/*test bench*/
module tb_moore_machine;
    reg clk, rst, x;
    wire z;
    moore_machine uut(clk, rst, x, z);
    initial begin
        $dumpfile("moore_machine.vcd");
        $dumpvars(0, tb_moore_machine);

        clk = 0; rst = 1; #10;
        rst = 0; x = 1; #10;
        x = 0; #10;
        x = 1; #10;

        $finish;
    end

    always #5 clk = ~clk;
endmodule

/*Mealy Machine*/
module mealy_machine(input clk, rst, input x, output reg z);
    reg [1:0] state, next_state;

    parameter S0 = 2'b00, S1 = 2'b01, S2 = 2'b10, S3 = 2'b11;

    always @(posedge clk or posedge rst) begin
        if (rst)
            state <= S0;
        else
            state <= next_state;
    end

    always @(state or x) begin
        case(state)
            S0: next_state = x ? S1 : S0;
            S1: next_state = x ? S2 : S0;
            S2: next_state = x ? S3 : S0;
            S3: next_state = x ? S1 : S0;
            default: next_state = S0;
        endcase
    end

    always @(state or x) begin
        z = (state == S3 && x);
    end
endmodule
/*test bench*/
module tb_mealy_machine;
    reg clk, rst, x;
    wire z;
    mealy_machine uut(clk, rst, x, z);
    initial begin
        $dumpfile("mealy_machine.vcd");
        $dumpvars(0, tb_mealy_machine);

        clk = 0; rst = 1; #10;
        rst = 0; x = 1; #10;
        x = 0; #10;
        x = 1; #10;

        $finish;
    end

    always #5 clk = ~clk;
endmodule

/*FSM to Detect Sequence 1101*/
module fsm_1101(input clk, rst, input x, output reg z);
    reg [2:0] state, next_state;

    // State Encoding
    parameter S0 = 3'b000, S1 = 3'b001, S2 = 3'b010, S3 = 3'b011, S4 = 3'b100;

    // State Transition
    always @(posedge clk or posedge rst) begin
        if (rst)
            state <= S0;
        else
            state <= next_state;
    end

    // Next State Logic
    always @(state or x) begin
        case (state)
            S0: next_state = (x == 1) ? S1 : S0;
            S1: next_state = (x == 1) ? S2 : S0;
            S2: next_state = (x == 0) ? S3 : S0;
            S3: next_state = (x == 1) ? S4 : S0;
            S4: next_state = S0;
            default: next_state = S0;
        endcase
    end

    // Output Logic
    always @(state) begin
        z = (state == S4);
    end
endmodule
/*test bench*/
module tb_fsm_1101;
    reg clk, rst, x;
    wire z;
    
    fsm_1101 uut(clk, rst, x, z);
    
    initial begin
        $dumpfile("fsm_1101.vcd");
        $dumpvars(0, tb_fsm_1101);
        
        // Initialize
        clk = 0; rst = 1; x = 0; #10;
        rst = 0;
        
        // Test sequence 1101
        x = 1; #10;
        x = 1; #10;
        x = 0; #10;
        x = 1; #10;

        $finish;
    end

    always #5 clk = ~clk;  // Clock generation
endmodule

/*Modular Equation FSM*/
module modular_fsm(input clk, rst, input PA, PB, output reg O);
    reg [1:0] count_PA, count_PB;
    
    always @(posedge clk or posedge rst) begin
        if (rst) begin
            count_PA <= 0;
            count_PB <= 0;
        end else begin
            if (PA)
                count_PA <= count_PA + 1;
            if (PB)
                count_PB <= count_PB + 1;
        end
    end

    always @(*) begin
        O = (2 * count_PA + count_PB) % 4 == 1 ? 1'b1 : 1'b0;
    end
endmodule
/*test bench*/
module tb_modular_fsm;
    reg clk, rst, PA, PB;
    wire O;
    
    modular_fsm uut(clk, rst, PA, PB, O);
    
    initial begin
        $dumpfile("modular_fsm.vcd");
        $dumpvars(0, tb_modular_fsm);
        
        // Initialize
        clk = 0; rst = 1; PA = 0; PB = 0; #10;
        rst = 0;
        
        // Test cases
        PA = 0; PB = 0; #10;
        PA = 1; PB = 1; #10;
        PA = 1; PB = 0; #10;
        PA = 0; PB = 1; #10;

        $finish;
    end

    always #5 clk = ~clk;  // Clock generation
endmodule



